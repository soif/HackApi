<?php
// This file was generated by the HackapiTools::MakesMethods() using template.php
// Please do not modify it manually, but rather add endpoints to the template file, or add more complicated method in the main.php file

trait Hackapi_Opnsense_Trait {
	
	
	
	// ##################################################################################
	// ## 	'GET' API Methods ###########################################################
	// ##################################################################################
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ TESTED     Params still not ordered or desc not set ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetCoreMenuSearch
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetCoreMenuSearch(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/core/menu/search');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsServiceStatus
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsServiceStatus(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/ids/service/status');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsCheckPolicyRule
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsCheckPolicyRule(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/ids/settings/checkPolicyRule');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGet
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/ids/settings/get');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGetPolicy
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGetPolicy($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/ids/settings/getPolicy', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGetPolicyRule
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGetPolicyRule($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/ids/settings/getPolicyRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGetRulesetproperties
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGetRulesetproperties(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/ids/settings/getRulesetproperties');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsListRulesets
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsListRulesets(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/ids/settings/listRulesets');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesLoopbackSettingsGet
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesLoopbackSettingsGet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/interfaces/loopback_settings/get');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVipSettingsGet
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVipSettingsGet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/interfaces/vip_settings/get');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVipSettingsGetUnusedVhid
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVipSettingsGetUnusedVhid(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/interfaces/vip_settings/getUnusedVhid');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVlanSettingsGet
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVlanSettingsGet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/interfaces/vlan_settings/get');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVxlanSettingsGet
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVxlanSettingsGet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->CallApiGet('/interfaces/vxlan_settings/get');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVxlanSettingsGetItem
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVxlanSettingsGetItem($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/interfaces/vxlan_settings/getItem', $params);
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ UNDER DEV  Work in propress                         ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGetUserRule
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGetUserRule($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/ids/settings/getUserRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesLoopbackSettingsGetItem
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesLoopbackSettingsGetItem($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/interfaces/loopback_settings/getItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVipSettingsGetItem
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVipSettingsGetItem($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/interfaces/vip_settings/getItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesVlanSettingsGetItem
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesVlanSettingsGetItem($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/interfaces/vlan_settings/getItem', $params);
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ DRAFT      Not tested                               ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsServiceGetAlertInfo
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsServiceGetAlertInfo($alertId, $fileid=""){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'alertId'	=> $alertId,
			'fileid'	=> $fileid,
		);
		return $this->CallApiGet('/ids/service/getAlertInfo', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsServiceGetAlertLogs
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsServiceGetAlertLogs(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiGet('/ids/service/getAlertLogs');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGetRuleInfo
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGetRuleInfo($sid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'sid'	=> $sid,
		);
		return $this->CallApiGet('/ids/settings/getRuleInfo', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsGetRuleset
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsGetRuleset($id){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'id'	=> $id,
		);
		return $this->CallApiGet('/ids/settings/getRuleset', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetIdsSettingsListRuleMetadata
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetIdsSettingsListRuleMetadata(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiGet('/ids/settings/listRuleMetadata');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesLaggSettingsGet
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesLaggSettingsGet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiGet('/interfaces/lagg_settings/get');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetInterfacesLaggSettingsGetItem
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetInterfacesLaggSettingsGetItem($uuid="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiGet('/interfaces/lagg_settings/getItem', $params);
	}
	
	
	
	
	// ##################################################################################
	// ## 	'SET' API Methods ###########################################################
	// ##################################################################################
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ DRAFT      Not tested                               ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceDropAlertLog
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceDropAlertLog(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/dropAlertLog');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceQueryAlerts
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceQueryAlerts(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/queryAlerts');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceReconfigure
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceReconfigure(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/reconfigure');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceReloadRules
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceReloadRules(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/reloadRules');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceRestart
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceRestart(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/restart');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceStart
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceStart(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/start');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceStop
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceStop(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/service/stop');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsServiceUpdateRules
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsServiceUpdateRules($wait="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'wait'	=> $wait,
		);
		return $this->CallApiPost('/ids/service/updateRules', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsAddPolicy
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsAddPolicy(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/settings/addPolicy');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsAddPolicyRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsAddPolicyRule(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/settings/addPolicyRule');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsAddUserRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsAddUserRule(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/settings/addUserRule');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsDelPolicy
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsDelPolicy($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/ids/settings/delPolicy', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsDelPolicyRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsDelPolicyRule($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/ids/settings/delPolicyRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsDelUserRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsDelUserRule($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/ids/settings/delUserRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSearchInstalledRules
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSearchInstalledRules(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/settings/searchInstalledRules');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSet
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/settings/set');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSetPolicy
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSetPolicy($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/ids/settings/setPolicy', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSetPolicyRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSetPolicyRule($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/ids/settings/setPolicyRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSetRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSetRule($sid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'sid'	=> $sid,
		);
		return $this->CallApiPost('/ids/settings/setRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSetRuleset
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSetRuleset($filename){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'filename'	=> $filename,
		);
		return $this->CallApiPost('/ids/settings/setRuleset', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSetRulesetproperties
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSetRulesetproperties(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/ids/settings/setRulesetproperties');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsSetUserRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsSetUserRule($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/ids/settings/setUserRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsTogglePolicy
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsTogglePolicy($uuid, $enabled="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
			'enabled'	=> $enabled,
		);
		return $this->CallApiPost('/ids/settings/togglePolicy', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsTogglePolicyRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsTogglePolicyRule($uuid, $enabled="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
			'enabled'	=> $enabled,
		);
		return $this->CallApiPost('/ids/settings/togglePolicyRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsToggleRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsToggleRule($sids, $enabled="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'sids'	=> $sids,
			'enabled'	=> $enabled,
		);
		return $this->CallApiPost('/ids/settings/toggleRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsToggleRuleset
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsToggleRuleset($filenames, $enabled="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'filenames'	=> $filenames,
			'enabled'	=> $enabled,
		);
		return $this->CallApiPost('/ids/settings/toggleRuleset', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetIdsSettingsToggleUserRule
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetIdsSettingsToggleUserRule($uuid, $enabled="null"){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
			'enabled'	=> $enabled,
		);
		return $this->CallApiPost('/ids/settings/toggleUserRule', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLaggSettingsAddItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLaggSettingsAddItem(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/lagg_settings/addItem');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLaggSettingsDelItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLaggSettingsDelItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/lagg_settings/delItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLaggSettingsReconfigure
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLaggSettingsReconfigure(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/lagg_settings/reconfigure');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLaggSettingsSet
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLaggSettingsSet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/lagg_settings/set');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLaggSettingsSetItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLaggSettingsSetItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/lagg_settings/setItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLoopbackSettingsAddItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLoopbackSettingsAddItem(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/loopback_settings/addItem');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLoopbackSettingsDelItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLoopbackSettingsDelItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/loopback_settings/delItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLoopbackSettingsReconfigure
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLoopbackSettingsReconfigure(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/loopback_settings/reconfigure');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLoopbackSettingsSet
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLoopbackSettingsSet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/loopback_settings/set');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesLoopbackSettingsSetItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesLoopbackSettingsSetItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/loopback_settings/setItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVipSettingsAddItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVipSettingsAddItem(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vip_settings/addItem');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVipSettingsDelItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVipSettingsDelItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/vip_settings/delItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVipSettingsReconfigure
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVipSettingsReconfigure(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vip_settings/reconfigure');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVipSettingsSet
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVipSettingsSet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vip_settings/set');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVipSettingsSetItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVipSettingsSetItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/vip_settings/setItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVlanSettingsAddItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVlanSettingsAddItem(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vlan_settings/addItem');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVlanSettingsDelItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVlanSettingsDelItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/vlan_settings/delItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVlanSettingsReconfigure
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVlanSettingsReconfigure(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vlan_settings/reconfigure');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVlanSettingsSet
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVlanSettingsSet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vlan_settings/set');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVlanSettingsSetItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVlanSettingsSetItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/vlan_settings/setItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVxlanSettingsAddItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVxlanSettingsAddItem(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vxlan_settings/addItem');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVxlanSettingsDelItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVxlanSettingsDelItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/vxlan_settings/delItem', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVxlanSettingsReconfigure
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVxlanSettingsReconfigure(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vxlan_settings/reconfigure');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVxlanSettingsSet
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVxlanSettingsSet(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		return $this->CallApiPost('/interfaces/vxlan_settings/set');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetInterfacesVxlanSettingsSetItem
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetInterfacesVxlanSettingsSetItem($uuid){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'uuid'	=> $uuid,
		);
		return $this->CallApiPost('/interfaces/vxlan_settings/setItem', $params);
	}
	
	
	
	
	
	// ################################################################################################
	// List All methods Definitions ###################################################################
	// ################################################################################################
	
	public function ListMethodsDefinitions(){
		$def=array();
		$def['ApiGetCoreMenuSearch']=array (  'args' => '/core/menu/search',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/core/menu/search\'',  'f_args_txt' => '/core/menu/search',  'f_method_name' => 'ApiGetCoreMenuSearch',  'f_call' => 'CallApiGet',);
		$def['ApiSetIdsServiceDropAlertLog']=array (  'args' => '/ids/service/dropAlertLog',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/dropAlertLog\'',  'f_args_txt' => '/ids/service/dropAlertLog',  'f_method_name' => 'ApiSetIdsServiceDropAlertLog',  'f_call' => 'CallApiPost',);
		$def['ApiGetIdsServiceGetAlertInfo']=array (  'args' => '/ids/service/getAlertInfo',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'alertId' => '!',      'fileid' => '',    ),    'parameters' => '$params=array(		\'alertId\'	=> $alertId,		\'fileid\'	=> $fileid,	);',    'arguments' => '$alertId, $fileid=""',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/getAlertInfo\'',  'f_args_txt' => '/ids/service/getAlertInfo',  'f_method_name' => 'ApiGetIdsServiceGetAlertInfo',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsServiceGetAlertLogs']=array (  'args' => '/ids/service/getAlertLogs',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/getAlertLogs\'',  'f_args_txt' => '/ids/service/getAlertLogs',  'f_method_name' => 'ApiGetIdsServiceGetAlertLogs',  'f_call' => 'CallApiGet',);
		$def['ApiSetIdsServiceQueryAlerts']=array (  'args' => '/ids/service/queryAlerts',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/queryAlerts\'',  'f_args_txt' => '/ids/service/queryAlerts',  'f_method_name' => 'ApiSetIdsServiceQueryAlerts',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsServiceReconfigure']=array (  'args' => '/ids/service/reconfigure',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/reconfigure\'',  'f_args_txt' => '/ids/service/reconfigure',  'f_method_name' => 'ApiSetIdsServiceReconfigure',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsServiceReloadRules']=array (  'args' => '/ids/service/reloadRules',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/reloadRules\'',  'f_args_txt' => '/ids/service/reloadRules',  'f_method_name' => 'ApiSetIdsServiceReloadRules',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsServiceRestart']=array (  'args' => '/ids/service/restart',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/restart\'',  'f_args_txt' => '/ids/service/restart',  'f_method_name' => 'ApiSetIdsServiceRestart',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsServiceStart']=array (  'args' => '/ids/service/start',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/start\'',  'f_args_txt' => '/ids/service/start',  'f_method_name' => 'ApiSetIdsServiceStart',  'f_call' => 'CallApiPost',);
		$def['ApiGetIdsServiceStatus']=array (  'args' => '/ids/service/status',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/service/status\'',  'f_args_txt' => '/ids/service/status',  'f_method_name' => 'ApiGetIdsServiceStatus',  'f_call' => 'CallApiGet',);
		$def['ApiSetIdsServiceStop']=array (  'args' => '/ids/service/stop',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/stop\'',  'f_args_txt' => '/ids/service/stop',  'f_method_name' => 'ApiSetIdsServiceStop',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsServiceUpdateRules']=array (  'args' => '/ids/service/updateRules',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'wait' => 'null',    ),    'parameters' => '$params=array(		\'wait\'	=> $wait,	);',    'arguments' => '$wait="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/service/updateRules\'',  'f_args_txt' => '/ids/service/updateRules',  'f_method_name' => 'ApiSetIdsServiceUpdateRules',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsAddPolicy']=array (  'args' => '/ids/settings/addPolicy',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/addPolicy\'',  'f_args_txt' => '/ids/settings/addPolicy',  'f_method_name' => 'ApiSetIdsSettingsAddPolicy',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsAddPolicyRule']=array (  'args' => '/ids/settings/addPolicyRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/addPolicyRule\'',  'f_args_txt' => '/ids/settings/addPolicyRule',  'f_method_name' => 'ApiSetIdsSettingsAddPolicyRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsAddUserRule']=array (  'args' => '/ids/settings/addUserRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/addUserRule\'',  'f_args_txt' => '/ids/settings/addUserRule',  'f_method_name' => 'ApiSetIdsSettingsAddUserRule',  'f_call' => 'CallApiPost',);
		$def['ApiGetIdsSettingsCheckPolicyRule']=array (  'args' => '/ids/settings/checkPolicyRule',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/settings/checkPolicyRule\'',  'f_args_txt' => '/ids/settings/checkPolicyRule',  'f_method_name' => 'ApiGetIdsSettingsCheckPolicyRule',  'f_call' => 'CallApiGet',);
		$def['ApiSetIdsSettingsDelPolicy']=array (  'args' => '/ids/settings/delPolicy',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/delPolicy\'',  'f_args_txt' => '/ids/settings/delPolicy',  'f_method_name' => 'ApiSetIdsSettingsDelPolicy',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsDelPolicyRule']=array (  'args' => '/ids/settings/delPolicyRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/delPolicyRule\'',  'f_args_txt' => '/ids/settings/delPolicyRule',  'f_method_name' => 'ApiSetIdsSettingsDelPolicyRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsDelUserRule']=array (  'args' => '/ids/settings/delUserRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/delUserRule\'',  'f_args_txt' => '/ids/settings/delUserRule',  'f_method_name' => 'ApiSetIdsSettingsDelUserRule',  'f_call' => 'CallApiPost',);
		$def['ApiGetIdsSettingsGet']=array (  'args' => '/ids/settings/get',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/settings/get\'',  'f_args_txt' => '/ids/settings/get',  'f_method_name' => 'ApiGetIdsSettingsGet',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsGetPolicy']=array (  'args' => '/ids/settings/getPolicy',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/settings/getPolicy\'',  'f_args_txt' => '/ids/settings/getPolicy',  'f_method_name' => 'ApiGetIdsSettingsGetPolicy',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsGetPolicyRule']=array (  'args' => '/ids/settings/getPolicyRule',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/settings/getPolicyRule\'',  'f_args_txt' => '/ids/settings/getPolicyRule',  'f_method_name' => 'ApiGetIdsSettingsGetPolicyRule',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsGetRuleInfo']=array (  'args' => '/ids/settings/getRuleInfo',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'sid' => 'null',    ),    'parameters' => '$params=array(		\'sid\'	=> $sid,	);',    'arguments' => '$sid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/getRuleInfo\'',  'f_args_txt' => '/ids/settings/getRuleInfo',  'f_method_name' => 'ApiGetIdsSettingsGetRuleInfo',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsGetRuleset']=array (  'args' => '/ids/settings/getRuleset',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'id' => '!',    ),    'parameters' => '$params=array(		\'id\'	=> $id,	);',    'arguments' => '$id',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/getRuleset\'',  'f_args_txt' => '/ids/settings/getRuleset',  'f_method_name' => 'ApiGetIdsSettingsGetRuleset',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsGetRulesetproperties']=array (  'args' => '/ids/settings/getRulesetproperties',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/settings/getRulesetproperties\'',  'f_args_txt' => '/ids/settings/getRulesetproperties',  'f_method_name' => 'ApiGetIdsSettingsGetRulesetproperties',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsGetUserRule']=array (  'args' => '/ids/settings/getUserRule',  'state' => '3',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'/ids/settings/getUserRule\'',  'f_args_txt' => '/ids/settings/getUserRule',  'f_method_name' => 'ApiGetIdsSettingsGetUserRule',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsListRuleMetadata']=array (  'args' => '/ids/settings/listRuleMetadata',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/listRuleMetadata\'',  'f_args_txt' => '/ids/settings/listRuleMetadata',  'f_method_name' => 'ApiGetIdsSettingsListRuleMetadata',  'f_call' => 'CallApiGet',);
		$def['ApiGetIdsSettingsListRulesets']=array (  'args' => '/ids/settings/listRulesets',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/ids/settings/listRulesets\'',  'f_args_txt' => '/ids/settings/listRulesets',  'f_method_name' => 'ApiGetIdsSettingsListRulesets',  'f_call' => 'CallApiGet',);
		$def['ApiSetIdsSettingsSearchInstalledRules']=array (  'args' => '/ids/settings/searchInstalledRules',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/searchInstalledRules\'',  'f_args_txt' => '/ids/settings/searchInstalledRules',  'f_method_name' => 'ApiSetIdsSettingsSearchInstalledRules',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSet']=array (  'args' => '/ids/settings/set',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/set\'',  'f_args_txt' => '/ids/settings/set',  'f_method_name' => 'ApiSetIdsSettingsSet',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSetPolicy']=array (  'args' => '/ids/settings/setPolicy',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/setPolicy\'',  'f_args_txt' => '/ids/settings/setPolicy',  'f_method_name' => 'ApiSetIdsSettingsSetPolicy',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSetPolicyRule']=array (  'args' => '/ids/settings/setPolicyRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/setPolicyRule\'',  'f_args_txt' => '/ids/settings/setPolicyRule',  'f_method_name' => 'ApiSetIdsSettingsSetPolicyRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSetRule']=array (  'args' => '/ids/settings/setRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'sid' => '!',    ),    'parameters' => '$params=array(		\'sid\'	=> $sid,	);',    'arguments' => '$sid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/setRule\'',  'f_args_txt' => '/ids/settings/setRule',  'f_method_name' => 'ApiSetIdsSettingsSetRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSetRuleset']=array (  'args' => '/ids/settings/setRuleset',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'filename' => '!',    ),    'parameters' => '$params=array(		\'filename\'	=> $filename,	);',    'arguments' => '$filename',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/setRuleset\'',  'f_args_txt' => '/ids/settings/setRuleset',  'f_method_name' => 'ApiSetIdsSettingsSetRuleset',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSetRulesetproperties']=array (  'args' => '/ids/settings/setRulesetproperties',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/setRulesetproperties\'',  'f_args_txt' => '/ids/settings/setRulesetproperties',  'f_method_name' => 'ApiSetIdsSettingsSetRulesetproperties',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsSetUserRule']=array (  'args' => '/ids/settings/setUserRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/setUserRule\'',  'f_args_txt' => '/ids/settings/setUserRule',  'f_method_name' => 'ApiSetIdsSettingsSetUserRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsTogglePolicy']=array (  'args' => '/ids/settings/togglePolicy',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',      'enabled' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,		\'enabled\'	=> $enabled,	);',    'arguments' => '$uuid, $enabled="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/togglePolicy\'',  'f_args_txt' => '/ids/settings/togglePolicy',  'f_method_name' => 'ApiSetIdsSettingsTogglePolicy',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsTogglePolicyRule']=array (  'args' => '/ids/settings/togglePolicyRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',      'enabled' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,		\'enabled\'	=> $enabled,	);',    'arguments' => '$uuid, $enabled="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/togglePolicyRule\'',  'f_args_txt' => '/ids/settings/togglePolicyRule',  'f_method_name' => 'ApiSetIdsSettingsTogglePolicyRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsToggleRule']=array (  'args' => '/ids/settings/toggleRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'sids' => '!',      'enabled' => 'null',    ),    'parameters' => '$params=array(		\'sids\'	=> $sids,		\'enabled\'	=> $enabled,	);',    'arguments' => '$sids, $enabled="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/toggleRule\'',  'f_args_txt' => '/ids/settings/toggleRule',  'f_method_name' => 'ApiSetIdsSettingsToggleRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsToggleRuleset']=array (  'args' => '/ids/settings/toggleRuleset',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'filenames' => '!',      'enabled' => 'null',    ),    'parameters' => '$params=array(		\'filenames\'	=> $filenames,		\'enabled\'	=> $enabled,	);',    'arguments' => '$filenames, $enabled="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/toggleRuleset\'',  'f_args_txt' => '/ids/settings/toggleRuleset',  'f_method_name' => 'ApiSetIdsSettingsToggleRuleset',  'f_call' => 'CallApiPost',);
		$def['ApiSetIdsSettingsToggleUserRule']=array (  'args' => '/ids/settings/toggleUserRule',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',      'enabled' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,		\'enabled\'	=> $enabled,	);',    'arguments' => '$uuid, $enabled="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/ids/settings/toggleUserRule\'',  'f_args_txt' => '/ids/settings/toggleUserRule',  'f_method_name' => 'ApiSetIdsSettingsToggleUserRule',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLaggSettingsAddItem']=array (  'args' => '/interfaces/lagg_settings/addItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/addItem\'',  'f_args_txt' => '/interfaces/lagg_settings/addItem',  'f_method_name' => 'ApiSetInterfacesLaggSettingsAddItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLaggSettingsDelItem']=array (  'args' => '/interfaces/lagg_settings/delItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/delItem\'',  'f_args_txt' => '/interfaces/lagg_settings/delItem',  'f_method_name' => 'ApiSetInterfacesLaggSettingsDelItem',  'f_call' => 'CallApiPost',);
		$def['ApiGetInterfacesLaggSettingsGet']=array (  'args' => '/interfaces/lagg_settings/get',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/get\'',  'f_args_txt' => '/interfaces/lagg_settings/get',  'f_method_name' => 'ApiGetInterfacesLaggSettingsGet',  'f_call' => 'CallApiGet',);
		$def['ApiGetInterfacesLaggSettingsGetItem']=array (  'args' => '/interfaces/lagg_settings/getItem',  'state' => '1',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/getItem\'',  'f_args_txt' => '/interfaces/lagg_settings/getItem',  'f_method_name' => 'ApiGetInterfacesLaggSettingsGetItem',  'f_call' => 'CallApiGet',);
		$def['ApiSetInterfacesLaggSettingsReconfigure']=array (  'args' => '/interfaces/lagg_settings/reconfigure',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/reconfigure\'',  'f_args_txt' => '/interfaces/lagg_settings/reconfigure',  'f_method_name' => 'ApiSetInterfacesLaggSettingsReconfigure',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLaggSettingsSet']=array (  'args' => '/interfaces/lagg_settings/set',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/set\'',  'f_args_txt' => '/interfaces/lagg_settings/set',  'f_method_name' => 'ApiSetInterfacesLaggSettingsSet',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLaggSettingsSetItem']=array (  'args' => '/interfaces/lagg_settings/setItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/lagg_settings/setItem\'',  'f_args_txt' => '/interfaces/lagg_settings/setItem',  'f_method_name' => 'ApiSetInterfacesLaggSettingsSetItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLoopbackSettingsAddItem']=array (  'args' => '/interfaces/loopback_settings/addItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/loopback_settings/addItem\'',  'f_args_txt' => '/interfaces/loopback_settings/addItem',  'f_method_name' => 'ApiSetInterfacesLoopbackSettingsAddItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLoopbackSettingsDelItem']=array (  'args' => '/interfaces/loopback_settings/delItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/loopback_settings/delItem\'',  'f_args_txt' => '/interfaces/loopback_settings/delItem',  'f_method_name' => 'ApiSetInterfacesLoopbackSettingsDelItem',  'f_call' => 'CallApiPost',);
		$def['ApiGetInterfacesLoopbackSettingsGet']=array (  'args' => '/interfaces/loopback_settings/get',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/interfaces/loopback_settings/get\'',  'f_args_txt' => '/interfaces/loopback_settings/get',  'f_method_name' => 'ApiGetInterfacesLoopbackSettingsGet',  'f_call' => 'CallApiGet',);
		$def['ApiGetInterfacesLoopbackSettingsGetItem']=array (  'args' => '/interfaces/loopback_settings/getItem',  'state' => '3',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'/interfaces/loopback_settings/getItem\'',  'f_args_txt' => '/interfaces/loopback_settings/getItem',  'f_method_name' => 'ApiGetInterfacesLoopbackSettingsGetItem',  'f_call' => 'CallApiGet',);
		$def['ApiSetInterfacesLoopbackSettingsReconfigure']=array (  'args' => '/interfaces/loopback_settings/reconfigure',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/loopback_settings/reconfigure\'',  'f_args_txt' => '/interfaces/loopback_settings/reconfigure',  'f_method_name' => 'ApiSetInterfacesLoopbackSettingsReconfigure',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLoopbackSettingsSet']=array (  'args' => '/interfaces/loopback_settings/set',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/loopback_settings/set\'',  'f_args_txt' => '/interfaces/loopback_settings/set',  'f_method_name' => 'ApiSetInterfacesLoopbackSettingsSet',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesLoopbackSettingsSetItem']=array (  'args' => '/interfaces/loopback_settings/setItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/loopback_settings/setItem\'',  'f_args_txt' => '/interfaces/loopback_settings/setItem',  'f_method_name' => 'ApiSetInterfacesLoopbackSettingsSetItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVipSettingsAddItem']=array (  'args' => '/interfaces/vip_settings/addItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vip_settings/addItem\'',  'f_args_txt' => '/interfaces/vip_settings/addItem',  'f_method_name' => 'ApiSetInterfacesVipSettingsAddItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVipSettingsDelItem']=array (  'args' => '/interfaces/vip_settings/delItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vip_settings/delItem\'',  'f_args_txt' => '/interfaces/vip_settings/delItem',  'f_method_name' => 'ApiSetInterfacesVipSettingsDelItem',  'f_call' => 'CallApiPost',);
		$def['ApiGetInterfacesVipSettingsGet']=array (  'args' => '/interfaces/vip_settings/get',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/interfaces/vip_settings/get\'',  'f_args_txt' => '/interfaces/vip_settings/get',  'f_method_name' => 'ApiGetInterfacesVipSettingsGet',  'f_call' => 'CallApiGet',);
		$def['ApiGetInterfacesVipSettingsGetItem']=array (  'args' => '/interfaces/vip_settings/getItem',  'state' => '3',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'/interfaces/vip_settings/getItem\'',  'f_args_txt' => '/interfaces/vip_settings/getItem',  'f_method_name' => 'ApiGetInterfacesVipSettingsGetItem',  'f_call' => 'CallApiGet',);
		$def['ApiGetInterfacesVipSettingsGetUnusedVhid']=array (  'args' => '/interfaces/vip_settings/getUnusedVhid',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/interfaces/vip_settings/getUnusedVhid\'',  'f_args_txt' => '/interfaces/vip_settings/getUnusedVhid',  'f_method_name' => 'ApiGetInterfacesVipSettingsGetUnusedVhid',  'f_call' => 'CallApiGet',);
		$def['ApiSetInterfacesVipSettingsReconfigure']=array (  'args' => '/interfaces/vip_settings/reconfigure',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vip_settings/reconfigure\'',  'f_args_txt' => '/interfaces/vip_settings/reconfigure',  'f_method_name' => 'ApiSetInterfacesVipSettingsReconfigure',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVipSettingsSet']=array (  'args' => '/interfaces/vip_settings/set',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vip_settings/set\'',  'f_args_txt' => '/interfaces/vip_settings/set',  'f_method_name' => 'ApiSetInterfacesVipSettingsSet',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVipSettingsSetItem']=array (  'args' => '/interfaces/vip_settings/setItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vip_settings/setItem\'',  'f_args_txt' => '/interfaces/vip_settings/setItem',  'f_method_name' => 'ApiSetInterfacesVipSettingsSetItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVlanSettingsAddItem']=array (  'args' => '/interfaces/vlan_settings/addItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vlan_settings/addItem\'',  'f_args_txt' => '/interfaces/vlan_settings/addItem',  'f_method_name' => 'ApiSetInterfacesVlanSettingsAddItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVlanSettingsDelItem']=array (  'args' => '/interfaces/vlan_settings/delItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vlan_settings/delItem\'',  'f_args_txt' => '/interfaces/vlan_settings/delItem',  'f_method_name' => 'ApiSetInterfacesVlanSettingsDelItem',  'f_call' => 'CallApiPost',);
		$def['ApiGetInterfacesVlanSettingsGet']=array (  'args' => '/interfaces/vlan_settings/get',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/interfaces/vlan_settings/get\'',  'f_args_txt' => '/interfaces/vlan_settings/get',  'f_method_name' => 'ApiGetInterfacesVlanSettingsGet',  'f_call' => 'CallApiGet',);
		$def['ApiGetInterfacesVlanSettingsGetItem']=array (  'args' => '/interfaces/vlan_settings/getItem',  'state' => '3',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'/interfaces/vlan_settings/getItem\'',  'f_args_txt' => '/interfaces/vlan_settings/getItem',  'f_method_name' => 'ApiGetInterfacesVlanSettingsGetItem',  'f_call' => 'CallApiGet',);
		$def['ApiSetInterfacesVlanSettingsReconfigure']=array (  'args' => '/interfaces/vlan_settings/reconfigure',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vlan_settings/reconfigure\'',  'f_args_txt' => '/interfaces/vlan_settings/reconfigure',  'f_method_name' => 'ApiSetInterfacesVlanSettingsReconfigure',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVlanSettingsSet']=array (  'args' => '/interfaces/vlan_settings/set',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vlan_settings/set\'',  'f_args_txt' => '/interfaces/vlan_settings/set',  'f_method_name' => 'ApiSetInterfacesVlanSettingsSet',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVlanSettingsSetItem']=array (  'args' => '/interfaces/vlan_settings/setItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vlan_settings/setItem\'',  'f_args_txt' => '/interfaces/vlan_settings/setItem',  'f_method_name' => 'ApiSetInterfacesVlanSettingsSetItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVxlanSettingsAddItem']=array (  'args' => '/interfaces/vxlan_settings/addItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vxlan_settings/addItem\'',  'f_args_txt' => '/interfaces/vxlan_settings/addItem',  'f_method_name' => 'ApiSetInterfacesVxlanSettingsAddItem',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVxlanSettingsDelItem']=array (  'args' => '/interfaces/vxlan_settings/delItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vxlan_settings/delItem\'',  'f_args_txt' => '/interfaces/vxlan_settings/delItem',  'f_method_name' => 'ApiSetInterfacesVxlanSettingsDelItem',  'f_call' => 'CallApiPost',);
		$def['ApiGetInterfacesVxlanSettingsGet']=array (  'args' => '/interfaces/vxlan_settings/get',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/interfaces/vxlan_settings/get\'',  'f_args_txt' => '/interfaces/vxlan_settings/get',  'f_method_name' => 'ApiGetInterfacesVxlanSettingsGet',  'f_call' => 'CallApiGet',);
		$def['ApiGetInterfacesVxlanSettingsGetItem']=array (  'args' => '/interfaces/vxlan_settings/getItem',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' =>     array (      'uuid' => 'null',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid="null"',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'/interfaces/vxlan_settings/getItem\'',  'f_args_txt' => '/interfaces/vxlan_settings/getItem',  'f_method_name' => 'ApiGetInterfacesVxlanSettingsGetItem',  'f_call' => 'CallApiGet',);
		$def['ApiSetInterfacesVxlanSettingsReconfigure']=array (  'args' => '/interfaces/vxlan_settings/reconfigure',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vxlan_settings/reconfigure\'',  'f_args_txt' => '/interfaces/vxlan_settings/reconfigure',  'f_method_name' => 'ApiSetInterfacesVxlanSettingsReconfigure',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVxlanSettingsSet']=array (  'args' => '/interfaces/vxlan_settings/set',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vxlan_settings/set\'',  'f_args_txt' => '/interfaces/vxlan_settings/set',  'f_method_name' => 'ApiSetInterfacesVxlanSettingsSet',  'f_call' => 'CallApiPost',);
		$def['ApiSetInterfacesVxlanSettingsSetItem']=array (  'args' => '/interfaces/vxlan_settings/setItem',  'state' => '1',  'type' => 'set',  'call_index' => 'post',  'params' =>   array (    'definitions' =>     array (      'uuid' => '!',    ),    'parameters' => '$params=array(		\'uuid\'	=> $uuid,	);',    'arguments' => '$uuid',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => '',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'/interfaces/vxlan_settings/setItem\'',  'f_args_txt' => '/interfaces/vxlan_settings/setItem',  'f_method_name' => 'ApiSetInterfacesVxlanSettingsSetItem',  'f_call' => 'CallApiPost',);
	
		return $def;
	}
	

}
?>