<?php
// This file was generated by the HackapiTools::MakesMethods() using template.php
// Please do not modify it manually, but rather add endpoints to the template file, or add more complicated method in the main.php file

trait Hackapi_Sfr_box_Trait {
	
	
	
	// ##################################################################################
	// ## 	'GET' API Methods ###########################################################
	// ##################################################################################
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ FINAL      Fully tested: Params ordered, desc set   ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetAuthGetToken
	*
	* Authentication Token
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetAuthGetToken(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGet('auth.getToken');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetDdnsGetInfo
	*
	* DynDNS information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetDdnsGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGet('ddns.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetDslGetInfo
	*
	* DSL Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetDslGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGet('dsl.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetFtthGetInfo
	*
	* FiberToTheHome Information 
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetFtthGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGet('ftth.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetFirewallGetInfo
	*
	* Firewall Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetFirewallGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGet('firewall.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetLanGetInfo
	*
	* LAN Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetLanGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGet('lan.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetLanGetDnsHostList
	*
	* List DNS host entries
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetLanGetDnsHostList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGetList('lan.getDnsHostList');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetLanGetHostsList
	*
	* List connected hosts
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetLanGetHostsList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiGetList('lan.getHostsList');
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ TESTED     Params still not ordered or desc not set ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetHotspotGetInfo
	*
	* Wifi Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetHotspotGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('hotspot.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetOntGetInfo
	*
	* ONT Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetOntGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('ont.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetP910ndGetInfo
	*
	*  Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetP910ndGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('p910nd.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetPppGetInfo
	*
	* PPP Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetPppGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('ppp.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetSmbGetInfo
	*
	* SMB Sharing Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetSmbGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('smb.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetTvGetInfo
	*
	* TV Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetTvGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('tv.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetUsbGetInfo
	*
	* USB Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetUsbGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('usb.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetVoipGetInfo
	*
	* VOIP (phone) Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetVoipGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('voip.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetWanGetInfo
	*
	* WAN Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetWanGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('wan.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetWlanGetClientList
	*
	* Wifi (2.4GHz) Client List
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetWlanGetClientList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGetList('wlan.getClientList');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetWlanGetInfo
	*
	* Wifi (2.4GHz) Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetWlanGetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('wlan.getInfo');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetWlanGetScanList
	*
	* Wifi (2.4GHz) Scan List
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetWlanGetScanList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGetList('wlan.getScanList');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetWlan5GetClientList
	*
	* Wifi (5GHz) Client List
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetWlan5GetClientList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGetList('wlan5.getClientList');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetWlan5GetInfo
	*
	* Wifi (5GHz) Information
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetWlan5GetInfo(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(4);
		return $this->MyCallApiGet('wlan5.getInfo');
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ UNDER DEV  Work in propress                         ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetAuthCheckToken
	*
	* Activate the Authentication Token Session (aka Login)
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetAuthCheckToken(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiGet('auth.checkToken');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetHotspotGetClientList
	*
	* List Wifi Clients
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetHotspotGetClientList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiGetList('hotspot.getClientList');
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ ERROR      Returns an error                         ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetBackup3gGetPinCode
	*
	* Get Cellular PIN code
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetBackup3gGetPinCode(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(2);
		return $this->MyCallApiGet('backup3g.getPinCode');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiGetVoipGetCallhistoryList
	*
	* VOIP (phone) Call History
	*
	* @category ApiGet
	* @return Array[]
	*/
	public function ApiGetVoipGetCallhistoryList(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(2);
		return $this->MyCallApiGetList('voip.getCallhistoryList');
	}
	
	
	
	
	// ##################################################################################
	// ## 	'SET' API Methods ###########################################################
	// ##################################################################################
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ FINAL      Fully tested: Params ordered, desc set   ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetDdnsDisable
	*
	* Disable DynDNS service
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetDdnsDisable(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiPost('ddns.disable');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetDdnsEnable
	*
	* Enable DynDNS service
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetDdnsEnable(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		return $this->MyCallApiPost('ddns.enable');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetLanAddDnsHost
	*
	* Add DNS host entry
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetLanAddDnsHost($ip, $name){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		$params=array(
			'ip'	=> $ip,
			'name'	=> $name,
		);
		return $this->MyCallApiPost('lan.addDnsHost', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetLanDeleteDnsHost
	*
	* Delete DNS host entry
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetLanDeleteDnsHost($ip, $name){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(5);
		$params=array(
			'ip'	=> $ip,
			'name'	=> $name,
		);
		return $this->MyCallApiPost('lan.deleteDnsHost', $params);
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ UNDER DEV  Work in propress                         ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetDdnsForceUpdate
	*
	* Force DynDNS update
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetDdnsForceUpdate(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiPost('ddns.forceUpdate');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetHotspotEnable
	*
	* Enable Wifi
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetHotspotEnable(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiPost('hotspot.enable');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetHotspotDisable
	*
	* Disable Wifi
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetHotspotDisable(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiPost('hotspot.disable');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetHotspotRestart
	*
	* Restart Wifi
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetHotspotRestart(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiPost('hotspot.restart');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetHotspotStart
	*
	* Start Wifi
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetHotspotStart(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiPost('hotspot.start');
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetHotspotStop
	*
	* Stop Wifi
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetHotspotStop(){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(3);
		return $this->MyCallApiPost('hotspot.stop');
	}
	
	
	
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// +++ DRAFT      Not tested                               ++++++++++++++++++
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetBackup3gForceDataLink
	*
	* Set (backup) Cellullar Mode
	*
	* @param string $mode	
	*		'on'	: Force Cell,
	*		'off'	: No Cell,
	*		'auto'	: Auto select,
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetBackup3gForceDataLink($mode){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'mode'	=> $mode,
		);
		return $this->MyCallApiPost('backup3g.forceDataLink', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetBackup3gForceVoipLink
	*
	* Set (backup) Cellullar policy for VOIP
	*
	* @param string $mode	
	*		'on'	: Allow Cell,
	*		'off'	: Disallow Cell,
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetBackup3gForceVoipLink($mode){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'mode'	=> $mode,
		);
		return $this->MyCallApiPost('backup3g.forceVoipLink', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetBackup3gSetPinCode
	*
	* Set Cellular PIN code
	*
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetBackup3gSetPinCode($pincode=""){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'pincode'	=> $pincode,
		);
		return $this->MyCallApiPost('backup3g.setPinCode', $params);
	}
	
	// -----------------------------------------------------------------------
	/**
	* ApiSetDdnsSetService
	*
	* Set DynDns Account
	*
	* @param string $service	either: dyndns | no-ip | ovh | dyndnsit | changeip | sitelutions
	* @category ApiSet
	* @return Array[]
	*/
	public function ApiSetDdnsSetService($service, $username="", $password="", $hostname=""){
		$this->DebugLogMethod();
		$this->HandleApiMethodStateAllowed(1);
		$params=array(
			'service'	=> $service,
			'username'	=> $username,
			'password'	=> $password,
			'hostname'	=> $hostname,
		);
		return $this->MyCallApiPost('ddns.setService', $params);
	}
	
	
	
	
	
	// ################################################################################################
	// List All methods Definitions ###################################################################
	// ################################################################################################
	
	public function ListMethodsDefinitions(){
		$def=array();
		$def['ApiGetAuthGetToken']=array (  'args' => 'auth.getToken',  'state' => '5',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Authentication Token',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'auth.getToken\'',  'f_args_txt' => 'auth.getToken',  'f_method_name' => 'ApiGetAuthGetToken',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetAuthCheckToken']=array (  'args' => 'auth.checkToken',  'state' => '3',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Activate the Authentication Token Session (aka Login)',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'auth.checkToken\'',  'f_args_txt' => 'auth.checkToken',  'f_method_name' => 'ApiGetAuthCheckToken',  'f_call' => 'MyCallApiGet',);
		$def['ApiSetBackup3gForceDataLink']=array (  'args' => 'backup3g.forceDataLink',  'state' => '1',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' =>     array (      'mode' =>       array (        0 => '!',        1 =>         array (          'on' => 'Force Cell',          'off' => 'No Cell',          'auto' => 'Auto select',        ),      ),    ),    'parameters' => '$params=array(		\'mode\'	=> $mode,	);',    'arguments' => '$mode',    'call_params' => ', $params',    'doc_desc' => '* @param string $mode	*		\'on\'	: Force Cell,*		\'off\'	: No Cell,*		\'auto\'	: Auto select,',    'def_value' => '',  ),  'desc' => 'Set (backup) Cellullar Mode',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'backup3g.forceDataLink\'',  'f_args_txt' => 'backup3g.forceDataLink',  'f_method_name' => 'ApiSetBackup3gForceDataLink',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetBackup3gForceVoipLink']=array (  'args' => 'backup3g.forceVoipLink',  'state' => '1',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' =>     array (      'mode' =>       array (        0 => '!',        1 =>         array (          'on' => 'Allow Cell',          'off' => 'Disallow Cell',        ),      ),    ),    'parameters' => '$params=array(		\'mode\'	=> $mode,	);',    'arguments' => '$mode',    'call_params' => ', $params',    'doc_desc' => '* @param string $mode	*		\'on\'	: Allow Cell,*		\'off\'	: Disallow Cell,',    'def_value' => '',  ),  'desc' => 'Set (backup) Cellullar policy for VOIP',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'backup3g.forceVoipLink\'',  'f_args_txt' => 'backup3g.forceVoipLink',  'f_method_name' => 'ApiSetBackup3gForceVoipLink',  'f_call' => 'MyCallApiPost',);
		$def['ApiGetBackup3gGetPinCode']=array (  'args' => 'backup3g.getPinCode',  'state' => '2',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Get Cellular PIN code',  'f_state_name' => 'ERROR',  'f_state_desc' => 'Returns an error',  'f_args_call' => '\'backup3g.getPinCode\'',  'f_args_txt' => 'backup3g.getPinCode',  'f_method_name' => 'ApiGetBackup3gGetPinCode',  'f_call' => 'MyCallApiGet',);
		$def['ApiSetBackup3gSetPinCode']=array (  'args' => 'backup3g.setPinCode',  'state' => '1',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' =>     array (      'pincode' => '',    ),    'parameters' => '$params=array(		\'pincode\'	=> $pincode,	);',    'arguments' => '$pincode=""',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Set Cellular PIN code',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'backup3g.setPinCode\'',  'f_args_txt' => 'backup3g.setPinCode',  'f_method_name' => 'ApiSetBackup3gSetPinCode',  'f_call' => 'MyCallApiPost',);
		$def['ApiGetDdnsGetInfo']=array (  'args' => 'ddns.getInfo',  'state' => '5',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'DynDNS information',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'ddns.getInfo\'',  'f_args_txt' => 'ddns.getInfo',  'f_method_name' => 'ApiGetDdnsGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiSetDdnsDisable']=array (  'args' => 'ddns.disable',  'state' => '5',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Disable DynDNS service',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'ddns.disable\'',  'f_args_txt' => 'ddns.disable',  'f_method_name' => 'ApiSetDdnsDisable',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetDdnsEnable']=array (  'args' => 'ddns.enable',  'state' => '5',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Enable DynDNS service',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'ddns.enable\'',  'f_args_txt' => 'ddns.enable',  'f_method_name' => 'ApiSetDdnsEnable',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetDdnsForceUpdate']=array (  'args' => 'ddns.forceUpdate',  'state' => '3',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Force DynDNS update',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'ddns.forceUpdate\'',  'f_args_txt' => 'ddns.forceUpdate',  'f_method_name' => 'ApiSetDdnsForceUpdate',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetDdnsSetService']=array (  'args' => 'ddns.setService',  'state' => '1',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' =>     array (      'service' =>       array (        0 => '!',        1 =>         array (          0 => 'dyndns',          1 => 'no-ip',          2 => 'ovh',          3 => 'dyndnsit',          4 => 'changeip',          5 => 'sitelutions',        ),      ),      'username' => '',      'password' => '',      'hostname' => '',    ),    'parameters' => '$params=array(		\'service\'	=> $service,		\'username\'	=> $username,		\'password\'	=> $password,		\'hostname\'	=> $hostname,	);',    'arguments' => '$service, $username="", $password="", $hostname=""',    'call_params' => ', $params',    'doc_desc' => '* @param string $service	either: dyndns | no-ip | ovh | dyndnsit | changeip | sitelutions',    'def_value' => '',  ),  'desc' => 'Set DynDns Account',  'f_state_name' => 'DRAFT',  'f_state_desc' => 'Not tested',  'f_args_call' => '\'ddns.setService\'',  'f_args_txt' => 'ddns.setService',  'f_method_name' => 'ApiSetDdnsSetService',  'f_call' => 'MyCallApiPost',);
		$def['ApiGetDslGetInfo']=array (  'args' => 'dsl.getInfo',  'state' => '5',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'DSL Information',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'dsl.getInfo\'',  'f_args_txt' => 'dsl.getInfo',  'f_method_name' => 'ApiGetDslGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetFtthGetInfo']=array (  'args' => 'ftth.getInfo',  'state' => '5',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'FiberToTheHome Information ',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'ftth.getInfo\'',  'f_args_txt' => 'ftth.getInfo',  'f_method_name' => 'ApiGetFtthGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetFirewallGetInfo']=array (  'args' => 'firewall.getInfo',  'state' => '5',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Firewall Information',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'firewall.getInfo\'',  'f_args_txt' => 'firewall.getInfo',  'f_method_name' => 'ApiGetFirewallGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetHotspotGetInfo']=array (  'args' => 'hotspot.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Wifi Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'hotspot.getInfo\'',  'f_args_txt' => 'hotspot.getInfo',  'f_method_name' => 'ApiGetHotspotGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetHotspotGetClientList']=array (  'args' => 'hotspot.getClientList',  'state' => '3',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'List Wifi Clients',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'hotspot.getClientList\'',  'f_args_txt' => 'hotspot.getClientList',  'f_method_name' => 'ApiGetHotspotGetClientList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiSetHotspotEnable']=array (  'args' => 'hotspot.enable',  'state' => '3',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Enable Wifi',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'hotspot.enable\'',  'f_args_txt' => 'hotspot.enable',  'f_method_name' => 'ApiSetHotspotEnable',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetHotspotDisable']=array (  'args' => 'hotspot.disable',  'state' => '3',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Disable Wifi',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'hotspot.disable\'',  'f_args_txt' => 'hotspot.disable',  'f_method_name' => 'ApiSetHotspotDisable',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetHotspotRestart']=array (  'args' => 'hotspot.restart',  'state' => '3',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Restart Wifi',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'hotspot.restart\'',  'f_args_txt' => 'hotspot.restart',  'f_method_name' => 'ApiSetHotspotRestart',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetHotspotStart']=array (  'args' => 'hotspot.start',  'state' => '3',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Start Wifi',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'hotspot.start\'',  'f_args_txt' => 'hotspot.start',  'f_method_name' => 'ApiSetHotspotStart',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetHotspotStop']=array (  'args' => 'hotspot.stop',  'state' => '3',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Stop Wifi',  'f_state_name' => 'UNDER DEV',  'f_state_desc' => 'Work in propress',  'f_args_call' => '\'hotspot.stop\'',  'f_args_txt' => 'hotspot.stop',  'f_method_name' => 'ApiSetHotspotStop',  'f_call' => 'MyCallApiPost',);
		$def['ApiGetLanGetInfo']=array (  'args' => 'lan.getInfo',  'state' => '5',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'LAN Information',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'lan.getInfo\'',  'f_args_txt' => 'lan.getInfo',  'f_method_name' => 'ApiGetLanGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetLanGetDnsHostList']=array (  'args' => 'lan.getDnsHostList',  'state' => '5',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'List DNS host entries',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'lan.getDnsHostList\'',  'f_args_txt' => 'lan.getDnsHostList',  'f_method_name' => 'ApiGetLanGetDnsHostList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiGetLanGetHostsList']=array (  'args' => 'lan.getHostsList',  'state' => '5',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'List connected hosts',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'lan.getHostsList\'',  'f_args_txt' => 'lan.getHostsList',  'f_method_name' => 'ApiGetLanGetHostsList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiSetLanAddDnsHost']=array (  'args' => 'lan.addDnsHost',  'state' => '5',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' =>     array (      'ip' => '!',      'name' => '!',    ),    'parameters' => '$params=array(		\'ip\'	=> $ip,		\'name\'	=> $name,	);',    'arguments' => '$ip, $name',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Add DNS host entry',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'lan.addDnsHost\'',  'f_args_txt' => 'lan.addDnsHost',  'f_method_name' => 'ApiSetLanAddDnsHost',  'f_call' => 'MyCallApiPost',);
		$def['ApiSetLanDeleteDnsHost']=array (  'args' => 'lan.deleteDnsHost',  'state' => '5',  'type' => 'set',  'call_index' => 'set',  'params' =>   array (    'definitions' =>     array (      'ip' => '!',      'name' => '!',    ),    'parameters' => '$params=array(		\'ip\'	=> $ip,		\'name\'	=> $name,	);',    'arguments' => '$ip, $name',    'call_params' => ', $params',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Delete DNS host entry',  'f_state_name' => 'FINAL',  'f_state_desc' => 'Fully tested: Params ordered, desc set',  'f_args_call' => '\'lan.deleteDnsHost\'',  'f_args_txt' => 'lan.deleteDnsHost',  'f_method_name' => 'ApiSetLanDeleteDnsHost',  'f_call' => 'MyCallApiPost',);
		$def['ApiGetOntGetInfo']=array (  'args' => 'ont.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'ONT Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'ont.getInfo\'',  'f_args_txt' => 'ont.getInfo',  'f_method_name' => 'ApiGetOntGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetP910ndGetInfo']=array (  'args' => 'p910nd.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => ' Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'p910nd.getInfo\'',  'f_args_txt' => 'p910nd.getInfo',  'f_method_name' => 'ApiGetP910ndGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetPppGetInfo']=array (  'args' => 'ppp.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'PPP Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'ppp.getInfo\'',  'f_args_txt' => 'ppp.getInfo',  'f_method_name' => 'ApiGetPppGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetSmbGetInfo']=array (  'args' => 'smb.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'SMB Sharing Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'smb.getInfo\'',  'f_args_txt' => 'smb.getInfo',  'f_method_name' => 'ApiGetSmbGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetTvGetInfo']=array (  'args' => 'tv.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'TV Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'tv.getInfo\'',  'f_args_txt' => 'tv.getInfo',  'f_method_name' => 'ApiGetTvGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetUsbGetInfo']=array (  'args' => 'usb.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'USB Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'usb.getInfo\'',  'f_args_txt' => 'usb.getInfo',  'f_method_name' => 'ApiGetUsbGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetVoipGetInfo']=array (  'args' => 'voip.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'VOIP (phone) Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'voip.getInfo\'',  'f_args_txt' => 'voip.getInfo',  'f_method_name' => 'ApiGetVoipGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetVoipGetCallhistoryList']=array (  'args' => 'voip.getCallhistoryList',  'state' => '2',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'VOIP (phone) Call History',  'f_state_name' => 'ERROR',  'f_state_desc' => 'Returns an error',  'f_args_call' => '\'voip.getCallhistoryList\'',  'f_args_txt' => 'voip.getCallhistoryList',  'f_method_name' => 'ApiGetVoipGetCallhistoryList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiGetWanGetInfo']=array (  'args' => 'wan.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'WAN Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'wan.getInfo\'',  'f_args_txt' => 'wan.getInfo',  'f_method_name' => 'ApiGetWanGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetWlanGetClientList']=array (  'args' => 'wlan.getClientList',  'state' => '4',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Wifi (2.4GHz) Client List',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'wlan.getClientList\'',  'f_args_txt' => 'wlan.getClientList',  'f_method_name' => 'ApiGetWlanGetClientList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiGetWlanGetInfo']=array (  'args' => 'wlan.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Wifi (2.4GHz) Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'wlan.getInfo\'',  'f_args_txt' => 'wlan.getInfo',  'f_method_name' => 'ApiGetWlanGetInfo',  'f_call' => 'MyCallApiGet',);
		$def['ApiGetWlanGetScanList']=array (  'args' => 'wlan.getScanList',  'state' => '4',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Wifi (2.4GHz) Scan List',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'wlan.getScanList\'',  'f_args_txt' => 'wlan.getScanList',  'f_method_name' => 'ApiGetWlanGetScanList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiGetWlan5GetClientList']=array (  'args' => 'wlan5.getClientList',  'state' => '4',  'type' => 'get',  'call_index' => 'getlist',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Wifi (5GHz) Client List',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'wlan5.getClientList\'',  'f_args_txt' => 'wlan5.getClientList',  'f_method_name' => 'ApiGetWlan5GetClientList',  'f_call' => 'MyCallApiGetList',);
		$def['ApiGetWlan5GetInfo']=array (  'args' => 'wlan5.getInfo',  'state' => '4',  'type' => 'get',  'call_index' => 'get',  'params' =>   array (    'definitions' => '',    'parameters' => '',    'arguments' => '',    'call_params' => '',    'doc_desc' => '',    'def_value' => '',  ),  'desc' => 'Wifi (5GHz) Information',  'f_state_name' => 'TESTED',  'f_state_desc' => 'Params still not ordered or desc not set',  'f_args_call' => '\'wlan5.getInfo\'',  'f_args_txt' => 'wlan5.getInfo',  'f_method_name' => 'ApiGetWlan5GetInfo',  'f_call' => 'MyCallApiGet',);
	
		return $def;
	}
	

}
?>